"""Starlark representation of locked requirements.

@generated by rules_python pip_parse repository rule
from @//:requirements.txt
"""

load("@rules_python//python/pip_install:pip_repository.bzl", "whl_library")

all_requirements = ["@everest-testing_pip_deps_attrs//:pkg", "@everest-testing_pip_deps_cffi//:pkg", "@everest-testing_pip_deps_cryptography//:pkg", "@everest-testing_pip_deps_exceptiongroup//:pkg", "@everest-testing_pip_deps_iniconfig//:pkg", "@everest-testing_pip_deps_jsonschema//:pkg", "@everest-testing_pip_deps_ocpp//:pkg", "@everest-testing_pip_deps_packaging//:pkg", "@everest-testing_pip_deps_paho_mqtt//:pkg", "@everest-testing_pip_deps_pluggy//:pkg", "@everest-testing_pip_deps_pycparser//:pkg", "@everest-testing_pip_deps_pyftpdlib//:pkg", "@everest-testing_pip_deps_pyopenssl//:pkg", "@everest-testing_pip_deps_pyrsistent//:pkg", "@everest-testing_pip_deps_pytest//:pkg", "@everest-testing_pip_deps_pytest_asyncio//:pkg", "@everest-testing_pip_deps_python_dateutil//:pkg", "@everest-testing_pip_deps_six//:pkg", "@everest-testing_pip_deps_tomli//:pkg", "@everest-testing_pip_deps_websockets//:pkg"]

all_whl_requirements = ["@everest-testing_pip_deps_attrs//:whl", "@everest-testing_pip_deps_cffi//:whl", "@everest-testing_pip_deps_cryptography//:whl", "@everest-testing_pip_deps_exceptiongroup//:whl", "@everest-testing_pip_deps_iniconfig//:whl", "@everest-testing_pip_deps_jsonschema//:whl", "@everest-testing_pip_deps_ocpp//:whl", "@everest-testing_pip_deps_packaging//:whl", "@everest-testing_pip_deps_paho_mqtt//:whl", "@everest-testing_pip_deps_pluggy//:whl", "@everest-testing_pip_deps_pycparser//:whl", "@everest-testing_pip_deps_pyftpdlib//:whl", "@everest-testing_pip_deps_pyopenssl//:whl", "@everest-testing_pip_deps_pyrsistent//:whl", "@everest-testing_pip_deps_pytest//:whl", "@everest-testing_pip_deps_pytest_asyncio//:whl", "@everest-testing_pip_deps_python_dateutil//:whl", "@everest-testing_pip_deps_six//:whl", "@everest-testing_pip_deps_tomli//:whl", "@everest-testing_pip_deps_websockets//:whl"]

all_data_requirements = ["@everest-testing_pip_deps_attrs//:data", "@everest-testing_pip_deps_cffi//:data", "@everest-testing_pip_deps_cryptography//:data", "@everest-testing_pip_deps_exceptiongroup//:data", "@everest-testing_pip_deps_iniconfig//:data", "@everest-testing_pip_deps_jsonschema//:data", "@everest-testing_pip_deps_ocpp//:data", "@everest-testing_pip_deps_packaging//:data", "@everest-testing_pip_deps_paho_mqtt//:data", "@everest-testing_pip_deps_pluggy//:data", "@everest-testing_pip_deps_pycparser//:data", "@everest-testing_pip_deps_pyftpdlib//:data", "@everest-testing_pip_deps_pyopenssl//:data", "@everest-testing_pip_deps_pyrsistent//:data", "@everest-testing_pip_deps_pytest//:data", "@everest-testing_pip_deps_pytest_asyncio//:data", "@everest-testing_pip_deps_python_dateutil//:data", "@everest-testing_pip_deps_six//:data", "@everest-testing_pip_deps_tomli//:data", "@everest-testing_pip_deps_websockets//:data"]

_packages = [("everest-testing_pip_deps_pytest", "pytest==7.2.2"), ("everest-testing_pip_deps_pytest_asyncio", "pytest-asyncio==0.21.0"), ("everest-testing_pip_deps_python_dateutil", "python-dateutil==2.8.2"), ("everest-testing_pip_deps_paho_mqtt", "paho-mqtt==1.6.1"), ("everest-testing_pip_deps_pyftpdlib", "pyftpdlib==1.5.7"), ("everest-testing_pip_deps_ocpp", "ocpp==0.17.0"), ("everest-testing_pip_deps_websockets", "websockets==10.4"), ("everest-testing_pip_deps_pyopenssl", "pyOpenSSL==23.0.0"), ("everest-testing_pip_deps_cryptography", "cryptography==39.0.2"), ("everest-testing_pip_deps_packaging", "packaging==23.0"), ("everest-testing_pip_deps_pycparser", "pycparser==2.21"), ("everest-testing_pip_deps_attrs", "attrs==22.2.0"), ("everest-testing_pip_deps_cffi", "cffi==1.15.1"), ("everest-testing_pip_deps_exceptiongroup", "exceptiongroup==1.1.1"), ("everest-testing_pip_deps_iniconfig", "iniconfig==2.0.0"), ("everest-testing_pip_deps_jsonschema", "jsonschema==4.17.3"), ("everest-testing_pip_deps_pluggy", "pluggy==1.0.0"), ("everest-testing_pip_deps_pyrsistent", "pyrsistent==0.19.3"), ("everest-testing_pip_deps_six", "six==1.16.0"), ("everest-testing_pip_deps_tomli", "tomli==2.0.1")]
_config = {"download_only": False, "enable_implicit_namespace_pkgs": False, "environment": {}, "extra_pip_args": [], "isolated": True, "pip_data_exclude": [], "python_interpreter": "python3", "quiet": True, "repo": "everest-testing_pip_deps", "repo_prefix": "everest-testing_pip_deps_", "timeout": 600}
_annotations = {}

def _clean_name(name):
    return name.replace("-", "_").replace(".", "_").lower()

def requirement(name):
    return "@everest-testing_pip_deps_" + _clean_name(name) + "//:pkg"

def whl_requirement(name):
    return "@everest-testing_pip_deps_" + _clean_name(name) + "//:whl"

def data_requirement(name):
    return "@everest-testing_pip_deps_" + _clean_name(name) + "//:data"

def dist_info_requirement(name):
    return "@everest-testing_pip_deps_" + _clean_name(name) + "//:dist_info"

def entry_point(pkg, script = None):
    if not script:
        script = pkg
    return "@everest-testing_pip_deps_" + _clean_name(pkg) + "//:rules_python_wheel_entry_point_" + script

def _get_annotation(requirement):
    # This expects to parse `setuptools==58.2.0     --hash=sha256:2551203ae6955b9876741a26ab3e767bb3242dafe86a32a749ea0d78b6792f11`
    # down to `setuptools`.
    name = requirement.split(" ")[0].split("=")[0].split("[")[0]
    return _annotations.get(name)

def install_deps(**whl_library_kwargs):
    whl_config = dict(_config)
    whl_config.update(whl_library_kwargs)
    for name, requirement in _packages:
        whl_library(
            name = name,
            requirement = requirement,
            annotation = _get_annotation(requirement),
            **whl_config
        )
